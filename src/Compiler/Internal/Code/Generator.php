<?php

/**
 * MIT License
 * Copyright (c) 2024 kafkiansky.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

declare(strict_types=1);

namespace Prototype\Compiler\Internal\Code;

use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\Printer;
use Nette\PhpGenerator\PromotedParameter;
use Prototype\Compiler\Internal\Proto\Schema;
use Prototype\Compiler\Internal;

/**
 * @internal
 * @psalm-internal Prototype\Compiler
 */
final class Generator
{
    public function __construct(
        private readonly Printer $printer,
    ) {}

    /**
     * @param non-empty-string $dir
     */
    public function generateFile(
        Schema $schema,
        string $phpNamespace,
        string $dir,
    ): void {
        foreach ($schema->messages as $message) {
            $file = (new PhpFile())
                ->setStrictTypes()
                ->addComment('This code was auto-generated by the prototype/compiler.')
                ->addComment('Do not edit this file manually.')
            ;

            $namespace = $file
                ->addNamespace(
                    Internal\fixPhpNamespace($phpNamespace),
                )
            ;

            $class = $namespace
                ->addClass($message->name)
                ->setFinal()
                ->addComment('@api')
            ;

            $method = $class
                ->addMethod('__construct')
            ;

            /** @var PromotedParameter[] $parameters */
            $parameters = [];

            foreach ($message->fields as $field) {
                $parameters[] = (new PromotedParameter($field->name))
                    ->setReadOnly()
                    ->setType($field->type->toNative())
                ;

                $method->addComment(
                    $field->type->toPhpDoc($field->name),
                );
            }

            $method->setParameters($parameters);

            Internal\writeFile(
                $this->printer->printFile($file),
                $dir,
                $message->asFileName(),
            );
        }
    }
}
